[{"name":"NoBooleanCaseOf","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when pattern matching is used for a boolean value.\n\nThe idiomatic way to check for a condition is to use an `if` expression.\nRead more about it at: <https://guide.elm-lang.org/core_language.html#if-expressions>\n\n    config =\n        [ NoBooleanCaseOf.rule\n        ]\n\nThis won't report pattern matching when a boolean is part of the evaluated value.\n\n\n## Fail\n\n    _ =\n        case bool of\n            True ->\n                expression\n\n            False ->\n                otherExpression\n\n\n## Success\n\n    _ =\n        if bool then\n            expression\n\n        else\n            otherExpression\n\n    _ =\n        case ( bool, somethingElse ) of\n            ( True, SomeThingElse ) ->\n                expression\n\n            _ ->\n                otherExpression\n\n\n# When (not) to use this rule\n\nYou should not use this rule if you do not care about how your boolean values are\nevaluated.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-simplification/example --rules NoBooleanCaseOf\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"NoFullyAppliedPrefixOperator","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when an operator is used as a prefix operator and all the operands are already given.\n\n    config =\n        [ NoFullyAppliedPrefixOperator.rule\n        ]\n\n\n## Fail\n\n    _ =\n        (+) 1 2\n\n\n## Success\n\n    _ =\n        1 + 2\n\n    _ =\n        (+) 1\n\n    _ =\n        (+)\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-simplification/example --rules NoFullyAppliedPrefixOperator\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"NoListLiteralsConcat","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when an operation on lists could be simplified to a single literal list.\n\n    config =\n        [ NoListLiteralsConcat.rule\n        ]\n\n\n## Fail\n\n    _ =\n        [ 1, 2, 3 ] ++ [ 4, mysteryNumber, 6 ]\n\n    _ =\n        List.concat\n            [ [ 1, 2, 3 ]\n            , [ 4, mysteryNumber, 6 ]\n            ]\n\n    _ =\n        List.concat\n            [ [ 1, 2, 3 ]\n            ]\n\n    _ =\n        1 :: [ 2, 3 ]\n\n    _ =\n        [] ++ list\n\n    _ =\n        list ++ []\n\n\n## Success\n\n    _ =\n        [ 1, 2, 3, 4, mysteryNumber, 6 ]\n\n    _ =\n        [ 1, 2, 3 ] ++ list ++ [ 4, mysteryNumber, 6 ]\n\n    _ =\n        List.concat\n            [ [ 1, 2, 3 ]\n            , list\n            , [ 4, mysteryNumber, 6 ]\n            ]\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-simplification/example --rules NoListLiteralsConcat\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"Simplify.Booleans","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports and fixes conditionals that can be made simpler.\n\n    config =\n        [ Simplify.Booleans.rule\n        ]\n\n\n## Fail\n\n    a =\n        -- Simplifiable as: True\n        True || x\n\n    b =\n        -- Simplifiable as: x\n        x || False\n\n\n## Success\n\n    a =\n        x || y\n\n    b =\n        w && z\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-simplification/example --rules Simplify.Booleans\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"Simplify.Ifs","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports and fixes unnecessary `if` conditions, because the branch that will be taken is always the same and can be determined at compile-time.\n\n    config =\n        [ Simplify.Ifs.rule\n        ]\n\n\n## Fail\n\n    a =\n        if True then\n            1\n\n        else\n            -- Unnecessary branch\n            2\n\n    b =\n        if False then\n            -- Unnecessary branch\n            1\n\n        else\n            2\n\n\n## Success\n\n    a =\n        if condition then\n            1\n\n        else\n            2\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-simplification/example --rules Simplify.Ifs\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]}]